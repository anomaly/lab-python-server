version: '3'

dotenv: ['.env']

tasks:
  build:image:
    desc: builds a publishable docker image
    cmds:
      - |
        docker buildx build --platform=linux/amd64,linux/arm64 --push -t ghcr.io/anomaly/ghcr.io/{{.ORG_NAME}}/{{.PROJ_NAME}}:v{{.PROJ_VER}} -t ghcr.io/ghcr.io/{{.ORG_NAME}}/{{.PROJ_NAME}}:latest -f Dockerfile .
    vars:
      PROJ_VER:
        sh: "task version"
  dev:test:
    desc: runs tests inside the server container
    summary: |
      Uses pytest to run a set of extensive test suites for the project 
    cmds:
      - docker compose exec api sh -c "pytest"
  dev:pyshell:
    desc: get a python session on the api container
    cmds:
      - docker compose exec api sh -c "python"
  dev:psql:
    desc: postgres shell on the db container
    cmds:
      - |
        docker compose exec db sh -c \
        "psql -U {{.POSTGRES_USER}} -d {{.POSTGRES_DB}}"
  dev:sh:
    desc: get a bash session on the api container
    cmds:
      - docker compose exec api sh -c "bash"
  crypt:hash:
    desc: generate a random cryptographic hash
    cmds:
      - openssl rand -hex {{.CLI_ARGS}}
  db:init:
    desc: initialise the database schema
    cmds:
      - docker compose exec api sh -c "poetry run initdb"
  db:rev:
    desc: create a database migration, pass a string as commit string
    cmds:
      - | 
        docker compose exec api sh -c \
        "alembic -c /opt/$PROJ_NAME/alembic.ini revision \
        --autogenerate -m {{.CLI_ARGS}}"
  db:migrate:
    desc: migrates models to HEAD
    cmds:
      - | 
        docker compose exec api sh -c \
        "alembic -c /opt/$PROJ_NAME/alembic.ini upgrade head"
  db:alembic:
    desc: arbitrary alembic command in the container
    cmds:
      - |
        docker compose exec api sh -c \
        "alembic -c /opt/$PROJ_NAME/alembic.ini {{.CLI_ARGS}}"
  db:alembic:heads:
    desc: shows the HEAD SHA for alembic migrations
    cmds:
      - |
        docker compose exec api sh -c \
        "alembic -c /opt/$PROJ_NAME/alembic.ini heads"
  db:alembic:attach:
    desc: join the database container to alembic migrations
    summary: |
      This is useful if you have nuked your database and re-initialised
      the schema and want to join back to the head alembic migrations.

      We will attempt to create the alebmic_version table and populate
      the version_num field with the current head value.
    vars:
      HEAD_SHA:
        sh: "task db:alembic:heads | sed -e 's/ (head)//g'"
    cmds:
      - |
        docker compose exec db sh -c "psql \
        -U {{.POSTGRES_USER}} \
        -d {{.POSTGRES_DB}} -c \" \
        CREATE TABLE IF NOT EXISTS alembic_version ( version_num VARCHAR ); \
        INSERT INTO alembic_version ( version_num ) VALUES ( '{{.HEAD_SHA}}' );\""
  version:
    cmds:
      - cd src 
      - python -c "from labs import __version__; print(__version__)"
  # version:next:
  #   cmds:
  #     - |
  #       git describe --tags --abbrev=0 | \
  #       awk -F. '{$NF = $NF + 1;} 1' | \
  #       sed 's/ /./g' | \
  #       tee .version
  eject:
    desc: eject the project from a template
    summary: |
      This process will remove any references to the Anomaly labs template, 
      it specifically will set the package name to your project name, fix
      any references in configuration files to the labs project.

      Finally it will remove references to all alembic migrations 

      Ejecting the template should only ever be done once! 
    preconditions:
      # The project is not labs
      - test $PROJ_NAME != "labs"
    cmds:
      - ls 
      #- rm src/labs/alembic/versions/*.py
      #- FROM="labs"; TO=$PROJ_NAME; for FROM_DIR in `find . -name $FROM`; do if [ -d $FROM_DIR ]; then TARGET_DIR=`echo $FROM_DIR | sed "s/$FROM/$TO/g"`; echo $FROM_DIR ">" $TARGET_DIR; mv $FROM_DIR $TARGET_DIR; fi ; done; for SRC_FILE in `ls **/*.py **/Makefile **/*.yml **/Dockerfile **/*.dockerfile **/alembic.ini **/.env* **/README.md `; do sed -i '' "s/$FROM/$TO/g" $SRC_FILE; done
