# While optional this tells the Docker builder of the version
# syntax=docker/dockerfile:1
#
ARG PYTHON_VERSION=3.11.1-slim-bullseye

# This Dockerfile uses a multi stage build to slim down the image
# https://docs.docker.com/develop/develop-images/multistage-build/
#
# Portion of this is adapted from
# https://bit.ly/3Vw9B2m
#
# Base image for Python applications
# This image is particularly for a web server using uvicorn
FROM --platform=linux/amd64 python:${PYTHON_VERSION} as requirements-stage

# Update the based image to latest versions of packages
# python 3.10 seems to want python3-tk installed
RUN apt-get update \
    && apt-get -y upgrade \
    && apt-get install -y --no-install-recommends gcc python3-dev build-essential libpq-dev python3-tk \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Work in the temporary directory for the build phase
WORKDIR /tmp

# Copy the files in the src directory which is the app package
# and the dependency matrix dedescribed by pyproject.toml
COPY src/pyproject.toml src/poetry.lock* /tmp/

# Ask poetry to install all packages including the app
# not in virtual machine as we are in a container
RUN pip3 install --upgrade pip
RUN pip3 install poetry
RUN poetry config virtualenvs.create false
RUN poetry install --no-dev --no-root

# Generate the requirements.txt file.
RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

### Stage 2

FROM python:${PYTHON_VERSION}

ARG USER={PROJ_NAME}
ARG GROUP={PROJ_NAME}
ARG UID=1000
ARG GID=1000

ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONFAULTHANDLER=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Update the based image to latest versions of packages
# python 3.10 seems to want python3-tk installed
RUN apt-get update \
    && apt-get -y upgrade \
    && apt-get install -y --no-install-recommends libpq-dev python3-tk postgresql-client\
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

COPY --from=requirements-stage /tmp/requirements.txt /opt/requirements.txt
RUN pip install --no-cache-dir --upgrade -r /opt/requirements.txt

RUN groupadd --gid "${GID}" "${GROUP}"
RUN useradd --uid "${UID}" --gid "${GID}" --create-home "${USER}"
USER "${USER}"

WORKDIR /opt/${PROJ_NAME}
COPY ./src/. .

# Expose ports which is proxied via traefik
EXPOSE 80

# Labels are used to identify the image
LABEL org.opencontainers.image.source="https://github.com/anomaly/${PROJ_NAME}"
LABEL org.opencontainers.image.description="A Python web server using FastAPI and Uvicorn"
LABEL org.opencontainers.image.licenses="Apache-2.0"